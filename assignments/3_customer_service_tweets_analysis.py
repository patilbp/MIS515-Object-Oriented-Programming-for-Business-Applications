# -*- coding: utf-8 -*-
"""Homework 3_Bhagyashri Patil

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lss8QtAYyAnRrqY8ddA7HrSipYnXyUyd

### MIS-515 Homework 3: Customer Service Analytics
"""

"""
* MIS-515 : Assignment 3

* Problem Statement: Create a tool that allows the user to assess the linguistic properties of major companies’ customer service tweets.

Program should first ask the user to specify the type of analysis they would like to perform, and it should then ask the user which 
company they would like to analyze. It should allow the user to perform an unlimited number of analyses.

The dataset is available at https://dgoldberg.sdsu.edu/515/customer_service_tweets_full.json as a JSON array and contains approximately 
1,000 tweets for each of twelve major companies’ customer service Twitter handles, listed alphabetically below:

@amazonhelp | @AppleSupport | @Ask_Spectrum | @AskPlayStation | @comcastcares | @hulu_support 
@SpotifyCares | @sprintcare |@TMobileHelp | @Uber_Support | @UPSHelp | @XboxSupport

The tool should support the following types of analyses:
• Polarity: calculate average sentiment polarity across that company’s customer service tweets (calculate pertweet rather than per-sentence)
• Subjectivity: calculate average sentiment subjectivity across company’s customer service tweets (calculate pertweet rather than per-sentence)
• Formality index: this metric is an attempt to estimate how formally or informally text is written based upon its parts of speech (POS tagging)
Scores close to 0 reflect very informal text, and scores close to 100 reflect very formal text. 
Calculate the average formality across that company’s customer service tweets. Formality is computed as follows:

Formality = 50 * { (𝑓 − 𝑐) / (𝑓 + 𝑐) + 1 }

𝑓 = 𝑛𝑢𝑚𝑏𝑒𝑟 𝑜𝑓 𝑛𝑜𝑢𝑛𝑠, 𝑎𝑑𝑗𝑒𝑐𝑡𝑖𝑣𝑒𝑠, 𝑝𝑟𝑒𝑝𝑜𝑠𝑖𝑡𝑖𝑜𝑛𝑠, 𝑎𝑛𝑑 𝑑𝑒𝑡𝑒𝑟𝑚𝑖𝑛𝑒𝑟𝑠
𝑐 = 𝑛𝑢𝑚𝑏𝑒𝑟 𝑜𝑓 𝑝𝑟𝑜𝑛𝑜𝑢𝑛𝑠, 𝑣𝑒𝑟𝑏𝑠, 𝑎𝑑𝑣𝑒𝑟𝑏𝑠, 𝑎𝑛𝑑 𝑖𝑛𝑡𝑒𝑟𝑗𝑒𝑐𝑡𝑖𝑜𝑛𝑠

Consider: tag “NN” as noun; tag “JJ” as adjective; tag “IN” as proposition; tag “DT” as determiner; tag “PR” as pronoun; 
tag “VB” as verb; tag “RB” as adverb; tag “UH” as interjection.

Write your code such that the entirety of your program is case insensitive (for e.g. program should behave equivalently if the user enters 
“yes”, “Yes”, or “YES” or if they enter “@sprintcare” or “@SprintCare”). However, do not perform any spellchecking on this assignment 
(unfortunately, the spellchecker we have used corrects “polarity” to “popularity”).
"""

# Homework - 3: Solution
# Code Indent used : 4

# Importing the required libraries and installations
import nltk, json, requests, textblob
nltk.download("punkt")
nltk.download("averaged_perceptron_tagger")

# Welcome message to user
print("\n*** Welcome to the customer service analyzer! ***")

# By-default start of the first execution
repeat = 'yes'

# Run the execution for an unlimited number of times, until user stops.
while repeat.lower().strip() == 'yes':
    """
    (1) .lower() = for handling lower case letters
    (2) .strip() = for removing extra spaces added before/after the string
    """

    # URL for JSON data
    response = requests.get("https://dgoldberg.sdsu.edu/515/customer_service_tweets_full.json")

    # JSON Connection Successful (Status code 200)
    if response:

        # JSON parser
        data = json.loads(response.text)

        # Initializing output lists
        f_formality = []
        c_formality = []        

        # Collecting all possible handles in the JSON data
        all_handles = []

        # Generating all unique handles
        for line in data:
            handles = line["Company"].lower()
            all_handles.append(handles)

        company_handles = list(set(all_handles))

        # User input for the 'type of analysis' and respective 'twitter handle' for analysis
        analysis_choice = input('\n\nWhich analysis would you like to perform\n(polarity/subjectivity/formality)? = ').lower()
        handle_choice = input('\nWhich Twitter handle would you like to analyze? = ').lower()
        
        # Output list for adding resultant scores    
        output = []
        
        # Check if user inputted handle exists in the JSON data
        if handle_choice not in company_handles:
            print("Sorry, that Twitter handle is not available. Please try again.")

        else: 
            # Check if analysis input is 'polarity' and user inputted handle matches the one in JSON data
            if (analysis_choice == "polarity"):

                # Fetch only customer service tweets from json data
                for line in data:
                    
                    # Calculate polarity for that specific handles
                    if line["Company"].lower() == handle_choice.lower():
                        blob = textblob.TextBlob(line["Text"])
                        output.append(blob.polarity)

                # To handle 'zero division error' exception
                if len(output) > 0:
                    avg_ploarity_output = sum(output)/len(output)
                    print(f'\n{handle_choice.strip()}: {avg_ploarity_output}')
                
                # Clearing out the output list
                output.clear()
        
            
            # Check if analysis input is 'subjectivity' and user inputted handle matches the one in JSON data
            elif (analysis_choice == "subjectivity"):
                
                # Fetch only customer service tweets from json data
                for line in data: # Subjectivity
                    
                    # Calculate polarity for that specific handles
                    if line["Company"].lower() == handle_choice.lower():
                        blob = textblob.TextBlob(line["Text"])
                        output.append(blob.subjectivity)

                # To handle 'zero division error' exception
                if len(output) > 0:
                    avg_subjectivity_output = sum(output) / len(output)
                    print(f'\n{handle_choice.strip()}: {avg_subjectivity_output}')
                
                # Clearing out the output list
                output.clear()
            
            
            # Check if analysis input is 'formality' and user inputted handle matches the one in JSON data
            elif (analysis_choice == "formality"):
                
                # Fetch only customer service tweets from json data
                for line in data: # Formality
                    
                    # Calculate polarity for that specific handles
                    if line["Company"].lower() == handle_choice.lower():
                        blob = textblob.TextBlob(line["Text"])
                        
                        # POS tagging loop
                        for word, tag in blob.tags:
                            
                            # Collecting Nouns, Adjectives, Prepositions, and Determiner
                            if tag == "NN" or tag == "JJ" or tag == "IN" or tag == "DT":
                                f_formality.append(tag)
                                fLength = len(f_formality)
                                
                            # Collecting Pronouns, Verbs, Adverbs, and Interjections
                            elif tag == "PR" or tag == "VB" or tag == "RB" or tag == "UH":
                                c_formality.append(tag)
                                cLength = len(c_formality)

                        # Formality formula
                        formality = 50 * (((fLength - cLength) / (fLength + cLength)) + 1)

                print(f'\n{handle_choice.strip()}: {formality}')
                output.append(formality)
                
                # Reset the counting lists
                f_formality.clear()
                c_formality.clear()
        
            else:
                print("\nSorry, that type of analysis is not supported. Please try again.")
        
        # Ask the user if they would like to run the execution again
        repeat = str(input('\n -> Would you like to run another analysis (yes/no)? = ')).lower().strip()


    # JSON Connection Error (Status code other than 200)
    else:
        print("\nSorry, JSON API connection error.")

# Exit message to user
print("\n\n*** Thank you for using customer service analyzer. ***")