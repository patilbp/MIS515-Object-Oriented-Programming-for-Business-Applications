# -*- coding: utf-8 -*-
"""Homework 4_Part 2_Bhagyashri Patil

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f44a9AWqZLnz5YF7XoSou-0CTm36WbpU

### MIS-515 Homework 4: Predicting Crowdfunding Success (Part-2)
"""

"""
* MIS-515 : Assignment 4 (Part II)

* Problem Statement: Part 2

In this program, ask the user for a series of inputs to load the decision tree model from a saved joblib file and predict the 
funding status for a new Kiva.com post. Then, load the decision tree model from the saved file and use it to make your prediction and print out the result. 
(Note: scikit-learn is expected a 2D list to make predictions, so you will need to reformat the userâ€™s inputs.) An example is below:

Enter the name of the decision tree file to load:
kiva_decision_tree.joblib

Enter the length of the post to predict: 1036
Enter the number of pictures in the post: 2
Enter the loan amount requested: 700
Enter the bonus credit eligibility (yes/no): yes
Enter whether the post was a user favorite post (yes/no): no

Based on the decision tree, the loan will not be funded.
"""

# Homework - 4 (Part II): Solution
# Code Indent used : 4

"""
In this Part-II, we are calling our earlier trained model from Part-I, to give prediction on the new data.
Hence we just need to use joblib here, to access the earlier saved decision model.
"""

# Importing the required libraries and installations
import joblib

# Welcome message to user
print("\n*** Welcome to the Crowdfunding Posts Classifier - Predicting ML Model! ***")

# Default first iteration of prediction and ask user if they want to have another prediction
repeat = 'yes'

# Allow user to input new data unlimited no. of times
while repeat == 'yes':

    # Ask the file name and load the earlier saved model
    model_file = input("\n\nEnter the name of the decision tree file to load: ")

    # Ask the user for a series of inputs
    length = int(input("\nEnter the length of the post to predict: "))
    number_of_pictures = int(input("Enter the number of pictures in the post: "))
    loan_amount = int(input("Enter the loan amount requested: "))
    bonus_credit_eligibility = input("Enter the bonus credit eligibility (yes/no): ")
    user_favorite_post = input("Enter whether the post was a user favorite post (yes/no): ")

    # Convert boolean response values to a 1/0 format
    # .lower() = to lower case the user input
    # .strip() = to remove extra spaces if added before/after the user input

    if bonus_credit_eligibility.lower().strip() == 'yes':
        bonus_credit_eligibility = 1
    else:
        bonus_credit_eligibility = 0
    
    if user_favorite_post.lower().strip == 'yes':
        user_favorite_post = 1
    else:
        user_favorite_post = 0

    # Storing feature names in a 2D list to make predictions by reformatting user inputs.
    x = [[length, number_of_pictures, loan_amount, bonus_credit_eligibility, user_favorite_post]]

    # Model file Connection Successful (Status code 200)
    try:

        # Load decision tree model from joblib file for further prediction
        clf = joblib.load(model_file)

        # Predicting values according to new data
        predictions = clf.predict(x)

        # Displaying the prediction result to user based on the output value
        if predictions == 0:
            print("\n\nBased on the decision tree, the loan will not be funded.")
        else:
            print("\n\nBased on the decision tree, the loan will be funded.")

        # Ask the user if they would like to add new data for prediction
        # repeat = str(input("\n\n---> Do you want to add new values for prediction (yes/no): ")).lower().strip()

    
    # Model file Connection Error (Status code other than 200)
    except Exception as FileNotFoundError:
        print("\n\nSorry, connection error while loading the decision tree file. Please check file name and try again.")

    
    # Ask the user if they would like to add new data for prediction
    repeat = str(input("\n\n---> Do you want to add new values for prediction (yes/no): ")).lower().strip()


# Exit message to user
print("\n\n*** Thank you for using Crowdfunding Posts Classifier - Predicting ML Model. ***")