# -*- coding: utf-8 -*-
"""Homework 4_Part 1_Bhagyashri Patil

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16JKTie1GleuDRVcrhzrjfO43ObMbeVG6

### MIS-515 Homework 4: Predicting Crowdfunding Success (Part-1)
"""

"""
* MIS-515 : Assignment 4 (Part I)

* Problem Statement: Create a tool that trains a decision tree machine learning model to perform the task of classifying crowdfunding posts.
The JSON formatted dataset is available at https://dgoldberg.sdsu.edu/515/kiva_data_full.json.

Your dataset of crowdfunding posts is taken from Kiva.com, which allows users to loan small amounts of money to small business ventures in
developing countries. Some posts meet their funding goals and receive the loans, whereas others expire before doing so. The goal of your tool is to
predict the success or failure of these posts as accurately as possible. Your decision tree model will predict the loan status (funded/expired).

The dataset contains data on 6,300 posts. Your decision tree model will make predictions based on five factors:
• Length: the number of characters in the post.
• Number of pictures: the number pictures in the post.
• Loan amount: the amount of money requested by the post.
• Bonus credit eligibility: whether the post was eligible for any bonus or promotional opportunity on Kiva.com (yes/no).
• User favorite post: whether the post received many page views on Kiva.com (yes/no).

Note that some of the variables described above are formatted as textual data (yes/no or funded/expired). You may need to transform these 
variables to a 1/0 format to train your decision tree model. Your submission should consist of two parts:

Part 1 : In this program, you will train the decision tree machine learning model and evaluate its accuracy. Split your data into training 
and test data. No specific proportion of training versus test data is required. At the end of your program:

• Print out the accuracy score for your decision tree model. Your accuracy score may not exactly match the score below, as it depends 
on your exact training/test split.
• Show a confusion matrix for your decision tree model.
• Output a saved version of the decision tree model to a joblib file.
• You do not need to show the visual plot/tree for this assignment. The tree becomes quite large because there are many variables being 
considered. If you were to plot the decision tree, then it might be advisable to use sklearn.tree.plot_tree(clf, max_depth = 3) 
(the max_depth setting only shows the first few levels of the decision tree).
"""

# Homework - 4 (Part I): Solution
# Code Indent used : 4


# Importing the required libraries and installations
import google.colab.files, json, joblib, requests, matplotlib.pyplot as plt
import sklearn
from sklearn import metrics, model_selection, tree

# Welcome message to user
print("\n*** Welcome to the Crowdfunding Posts Classifier - Training ML Model! ***")

# JSON Data URL
response = requests.get("https://dgoldberg.sdsu.edu/515/kiva_data_full.json")

# JSON Connection Successful (Status code 200)
if response:

    # JSON parser
    data = json.loads(response.text)
    # print(json.dumps(data, indent=4))

    # Initializing lists for responses and predictors
    x = []
    y = []

    # Parsing data for responses and predictors
    for line in data:
        
        # Feature names (Responses)
        length = line["length"]
        number_of_pictures = line["number_of_pictures"]
        loan_amount = line["loan_amount"]
              
        # Convert boolean response values to a 1/0 format
        # Reference: https://www.appsloveworld.com/pandas/100/2/is-there-a-simple-way-to-change-a-column-of-yes-no-to-1-0-in-a-pandas-dataframe
        
        bonus_credit_eligibility = (line["bonus_credit_eligibility"] == "yes")*1
        user_favorite_post = (line["user_favorite_post"] == "yes")*1
        
        # Class names (Predictors)
        loan_status = (line["loan_status"] == "funded")*1

        inner_list = [length, number_of_pictures, loan_amount, bonus_credit_eligibility, user_favorite_post]
        x.append(inner_list)

        y.append(loan_status)

    # For printing the 2D array in matrix format
    # for row in x:
        # print(row)

    # print(y)

    # Break data into training and test portions
    x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(x, y, test_size = 0.25, random_state = 0)

    # Train decision tree
    clf = sklearn.tree.DecisionTreeClassifier()
    clf = clf.fit(x_train, y_train)

    # Assess decision tree accuracy
    predictions = clf.predict(x_test)
    accuracy = sklearn.metrics.accuracy_score(y_test, predictions)
    print("\nAccuracy:", accuracy, "\n")

    # Show a visual confusion matrix
    cm = sklearn.metrics.confusion_matrix(y_test, predictions)
    # print("\n", cm)
    disp = sklearn.metrics.ConfusionMatrixDisplay(cm)
    disp.plot(cmap = plt.cm.YlGnBu)
    plt.show()

    # Show a visual of decision tree
    sklearn.tree.plot_tree(
                          clf, 
                          max_depth = 3, 
                          feature_names = ["length", "number_of_pictures", "loan_amount", "bonus_credit_eligibility", "user_favorite_post"], 
                          class_names = ["expired", "funded"]
                          )
    plt.show()

    # Export decision tree model using joblib
    joblib.dump(clf, "kiva_decision_tree.joblib")
    google.colab.files.download("kiva_decision_tree.joblib")
    print("\nDecision tree model saved to 'kiva_decision_tree.joblib'.\n")


# JSON Connection Error (Status code other than 200)
else:
    print("Sorry, connection error.")

# Exit message to user for Part-I
print("\n*** Thank you for using Crowdfunding Posts Classifier - Training ML Model. ***")